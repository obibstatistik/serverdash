{
    "collab_server" : "",
    "contents" : "library('dplyr')\nlibrary('shiny')\nlibrary('ggplot2')\nlibrary('ecm')\n\nlibrary(rCharts)\n\n#source(\"linechart.R\")\n\n# TODO: todays load averages in 3 layered graphs using f <- system(\"sadf -d -T /var/log/sysstat/sa10 -- -q | grep $(hostname) | grep -v RESTART\", intern =  TRUE)\n#       log mem each minute with free, to get the available column (not in sar since it's some algorithmic estimate) and use here\n#       nics with i/o of each. In kb/s\n#       also, disk-usage\n\nui <- fluidPage(\n  fluidRow(\n    column(width=9,\n           showOutput(\"myChart\", \"nvd3\")\n          \n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  #f <- system(\"sadf -d -T /var/log/sysstat/sa10 -- -q | grep $(hostname) | grep 21 | grep -v RESTART\", intern =  TRUE)\n  f <- system(\"sadf -d -T /var/log/sysstat/sa10 -- -q | grep $(hostname) | grep 21 | grep -v RESTART | sed s/\\\\,/\\\\./g\", intern =  TRUE)\n  fuf <- read.table(text=f,sep = \";\")\n  names(fuf) <- c(\"hostname\",\"interval\",\"timestamp\",\"runqsz\",\"plistsz\",\"ldavg1\",\"ldavg5\",\"ldavg15\",\"blocked\")\n  #fuf['timestamp'] <- apply(fuf['timestamp'], 1, function(timestamp) as.character(as.integer( as.POSIXct( timestamp ) , tz = \"Europe/Copenhagen\" ) * 1000 ))\n  fuf['timestamp'] <- apply(fuf['timestamp'], 1, function(timestamp) as.integer( as.POSIXct( timestamp ) , tz = \"Europe/Copenhagen\" ) * 1000 )\n  #fuf['ldavg1'] <- format(fuf['ldavg1'],decimal.mark=\".\")\n  # as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", fuf['ldavg1'])))\n  #fuf['timestamp'] <- as.character(fuf['timestamp'])\n  #ff <- select(fuf,as.integer( as.POSIXct( as.Date(timestamp) ) , tz = \"Europe/Copenhagen\" ) * 1000)\n  ff <- select(fuf,3,6:8)\n  ff\n  \n  output$myChart <- renderChart2({\n\n    ## {title: Pie Chart}\n    p4 <- nPlot(~ cyl, data = mtcars, type = 'pieChart')\n    p4\n    \n    ## {title: Line with Focus Chart }\n    ecm <- reshape2::melt(economics[,c('date', 'uempmed', 'psavert')], id = 'date')\n    p7 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineWithFocusChart')\n    #test format dates on the xAxis\n    #also good test of javascript functions as parameters\n    #dates from R to JSON will come over as number of days since 1970-01-01\n    #so convert to milliseconds 86400000 in a day and then format with d3\n    #on lineWithFocusChart type xAxis will also set x2Axis unless it is specified\n    p7$xAxis( tickFormat=\"#!function(d) {return d3.time.format('%H:%M:%S')(new Date( d * 86400000 ));}!#\" )\n    #test xAxis also sets x2Axis\n    p7\n    \n    ## {title: InteractiveGuidline(Multi-Tooltips) on Line}\n    p9 <- nPlot(value ~ date, group = 'variable', data = ecm, type = 'lineChart')\n    p9$xAxis( tickFormat=\"#!function(d) {return d3.time.format('%b %Y')(new Date( d * 86400000 ));}!#\" )\n    #try new interactive guidelines feature\n    p9$chart(useInteractiveGuideline=TRUE)\n    p9\n    \n    cat(as.character(fuf['plistsz']))\n    \n    ## {title: InteractiveGuidline(Multi-Tooltips) on Line}\n    p8 <- nPlot(ldavg1 ~ timestamp, data = fuf, type = 'lineChart')\n    #p8$xAxis( tickFormat=\"#!function(d) {return d3.time.format( '%H:%M:%S')(new Date( d * 86400000 ));}!#\" )\n    #p8$yAxis(height=400)\n    #p8$chart(forceY = c(0, 10))\n    #try new interactive guidelines feature\n    p8$chart(useInteractiveGuideline=TRUE)\n    p8\n\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "created" : 1491915957262.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3867824747",
    "id" : "2E55CFCC",
    "lastKnownWriteTime" : 1491965514,
    "last_content_update" : 1491965514567,
    "path" : "~/shiny_projekter/shiny_sysstat/simple_nvd3.R",
    "project_path" : "simple_nvd3.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}